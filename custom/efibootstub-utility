#!/bin/sh

# Get mountpoints
MOUNT_BOOT=`mount | grep " /boot " | cut -d " " -f 1`
MOUNT_ROOT=`mount | grep " / " | cut -d " " -f 1`

# Get you disk name and root partition UUID.
DISK_NAME=`lsblk "$MOUNT_ROOT" -o PKNAME | tail -1`
ROOT_UUID=`lsblk "$MOUNT_ROOT" -o UUID | tail -1`

# Check your cpu and gpu vendor
CPU=`lshw -class cpu | grep "vendor" | cut -d ":" -f 2 | cut -d " " -f 2`
GPU=`lshw -class video | grep "vendor" | cut -d ":" -f 2 | cut -d " " -f 2`

# Commandline Options
EFI_OPTIONS="zswap.enabled=0 rootfstype=btrfs resume=UUID=${ROOT_UUID} root=UUID=${ROOT_UUID} mitigations=off threadirqs rw rootflags=subvol=@ loglevel=3 nowatchdog quiet splash"

# Main Program
if [[ "$USER" == "root" ]]; then

    # Entry Creation Wizard
    clear
    echo "EFI boot stub creation wizard"
    echo ""
    ls /boot/vmlinuz* | tr " " "\n" | cut -d "-" -f 2,3
    echo ""
    read -r -p "Choose your kernel entry (i.e. linux, linux-zen): " KERNEL

    # Check if you want nvidia to use the foss or nvidia's open drivers
    if [[ "${GPU}" == "NVIDIA" ]]; then
		read -r -p "Do you want to use the nvidia foss drivers? (Options: yes or no): " NVIDIA_FOSS
    fi

    clear

    # Create EFIStub entries based of CPU choice
	if [[ "${CPU}" == "Advanced" ]]; then

		# AMD EFISTUB entry
		if [[ "${GPU}" == "NVIDIA" ]]; then

			if [[ "${NVIDIA_FOSS}" == "no" ]]; then
				arch-chroot ${MOUNT_DIR} efibootmgr --create --disk ${INSTALL_DISK} --part 1 --label "Arch Linux" --loader /vmlinuz-${KERNEL} --unicode "${EFI_OPTIONS} nvidia-drm.modeset=1 initrd=\amd-ucode.img initrd=\initramfs-${KERNEL}.img"

			elif [[ "${NVIDIA_FOSS}" == "yes" ]]; then
				arch-chroot ${MOUNT_DIR} efibootmgr --create --disk ${INSTALL_DISK} --part 1 --label "Arch Linux" --loader /vmlinuz-${KERNEL} --unicode "${EFI_OPTIONS} nouveau.config=NvGspRm=1 initrd=\amd-ucode.img initrd=\initramfs-${KERNEL}.img"
			fi

		else
			arch-chroot ${MOUNT_DIR} efibootmgr --create --disk ${INSTALL_DISK} --part 1 --label "Arch Linux" --loader /vmlinuz-${KERNEL} --unicode "${EFI_OPTIONS} initrd=\amd-ucode.img initrd=\initramfs-${KERNEL}.img"
		fi

	elif [[ "${CPU}" == "Intel" ]]; then

		# Intel EFISTUB entry
		if [[ "${GPU}" == "NVIDIA" ]]; then

			if [[ "${NVIDIA_FOSS}" == "no" ]]; then
				arch-chroot ${MOUNT_DIR} efibootmgr --create --disk ${INSTALL_DISK} --part 1 --label "Arch Linux" --loader /vmlinuz-${KERNEL} --unicode "${EFI_OPTIONS} nvidia-drm.modeset=1 initrd=\intel-ucode.img initrd=\initramfs-${KERNEL}.img"

			elif [[ "${NVIDIA_FOSS}" == "yes" ]]; then
				arch-chroot ${MOUNT_DIR} efibootmgr --create --disk ${INSTALL_DISK} --part 1 --label "Arch Linux" --loader /vmlinuz-${KERNEL} --unicode "${EFI_OPTIONS} nouveau.config=NvGspRm=1 initrd=\intel-ucode.img initrd=\initramfs-${KERNEL}.img"
			fi

		else
			arch-chroot ${MOUNT_DIR} efibootmgr --create --disk ${INSTALL_DISK} --part 1 --label "Arch Linux" --loader /vmlinuz-${KERNEL} --unicode "${EFI_OPTIONS} initrd=\intel-ucode.img initrd=\initramfs-${KERNEL}.img"
		fi

	else

		# EFISTUB entry no microcode
		if [[ "${GPU}" == "NVIDIA" ]]; then

			if [[ "${NVIDIA_FOSS}" == "no" ]]; then
				arch-chroot ${MOUNT_DIR} efibootmgr --create --disk ${INSTALL_DISK} --part 1 --label "Arch Linux" --loader /vmlinuz-${KERNEL} --unicode "${EFI_OPTIONS} nvidia-drm.modeset=1 initrd=\initramfs-${KERNEL}.img"

			elif [[ "${NVIDIA_FOSS}" == "yes" ]]; then
				arch-chroot ${MOUNT_DIR} efibootmgr --create --disk ${INSTALL_DISK} --part 1 --label "Arch Linux" --loader /vmlinuz-${KERNEL} --unicode "${EFI_OPTIONS} nouveau.config=NvGspRm=1 initrd=\initramfs-${KERNEL}.img"
			fi

		else
			arch-chroot ${MOUNT_DIR} efibootmgr --create --disk ${INSTALL_DISK} --part 1 --label "Arch Linux" --loader /vmlinuz-${KERNEL} --unicode "${EFI_OPTIONS} initrd=\initramfs-${KERNEL}.img"
		fi

	fi

    # Return to terminal
    clear
    fastfetch
    echo ""

else

    # Message when not root
    echo "Please become root before running this script..."

fi
