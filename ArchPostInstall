#!/bin/sh

# <<-- Globals -->>

## Graphics Driver

# AMD DRIVERS
AMDGPU_DRV="lib32-libva-mesa-driver lib32-vulkan-radeon libva-mesa-driver libva-utils rocm-opencl-runtime rocminfo vulkan-radeon"

# INTEL DRIVERS
INTELGPU_DRV="gst-plugin-qsv intel-compute-runtime intel-media-driver lib32-vulkan-intel libva-utils vpl-gpu-rt vulkan-intel"

# NVIDIA DRIVERS
NVIDIAGPU_DRV="lib32-nvidia-utils lib32-opencl-nvidia libva-nvidia-driver libva-utils libvdpau-va-gl nvidia-open-dkms nvidia-settings nvidia-utils opencl-nvidia vdpauinfo"

# OTHER DRIVERS
OTHERGPU_DRV="lib32-libva-mesa-driver lib32-vulkan-virtio libva-mesa-driver libva-utils vulkan-virtio"

## Start of package lists

# BASE SYSTEM for PLASMA
BASE_SYSTEM="7zip alsa-utils ark avahi bash-completion breeze5 btrfs-progs cups cups-browsed cups-filters cups-pdf cups-pk-helper dolphin dolphin-plugins elisa fastfetch ffmpeg ffmpeg4.4 ffmpegthumbs firewalld flatpak fwupd gamemode git google-chrome gst-libav gst-plugin-libcamera gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-good gst-plugins-ugly gst-plugin-va gwenview hunspell hunspell-en_au hunspell-en_ca hunspell-en_gb hunspell-en_us icoutils ifuse kamera kate kdialog keditbookmarks kid3 kimageformats kio-admin konsole lib32-gamemode lib32-gst-plugins-base lib32-gst-plugins-base-libs lib32-gst-plugins-good lib32-mangohud lib32-pipewire-jack lib32-pipewire-v4l2 libdvdcss libgpod libva-utils linux-firmware man-db man-pages mkinitcpio mkinitcpio-firmware multilib-devel net-tools networkmanager noto-fonts noto-fonts-cjk noto-fonts-emoji nss-mdns ntfs-3g openssh orca partitionmanager phonon-qt5-vlc phonon-qt6-vlc pipewire-alsa pipewire-audio pipewire-ffado pipewire-jack pipewire-libcamera pipewire-pulse pipewire-session-manager pipewire-v4l2 plasma-meta plasma-wayland-protocols plymouth pocl power-profiles-daemon pulse-native-provider qt5-multimedia qt6-multimedia qpwgraph realtime-privileges rtirq sane sane-airscan simple-scan steam steam-native-runtime sudo system-config-printer thunderbird usbguard vim vim-runtime wget wireless-regdb wireplumber xdg-desktop-portal-gtk xdg-user-dirs-gtk xf86-input-evdev xf86-input-libinput xorg-xauth xorg-xhost yt-dlp"

## End of package lists

arch_post_install() {

    # Global Variables
    CHAOTIC_KEY="3056513887B78AEB"

    ## Initialize Keyrings
    pacman-key --init
    pacman-key --populate archlinux
    pacman-key --lsign-key archlinux
    pacman-key --recv-key $CHAOTIC_KEY --keyserver keyserver.ubuntu.com
    pacman-key --lsign-key $CHAOTIC_KEY

    ## Chaotic AUR meta packages
    pacman -U --noconfirm 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst'
    pacman -U --noconfirm 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'

    # Install pacman.conf
    install -Dm644 pacman.conf $MOUNT_DIR/etc/pacman.conf

    ## Make vim the default system-wide editor
    echo "EDITOR=/usr/bin/vim" >> $MOUNT_DIR/etc/environment

    ## BTRFS early mkinitcpio module
    install -Dm644 mkinitcpio/60-btrfs.conf /etc/mkinitcpio.conf.d/60-btrfs.conf
    
    # Install system packages
	pacman -Syyuu --noconfirm $BASE_SYSTEM

    # Enable system services
    systemctl enable avahi-daemon.service
    systemctl enable avahi-dnsconfd.service
    systemctl enable bluetooth.service
    systemctl enable cups.service
    systemctl enable cups-browsed.service
    systemctl enable firewalld.service
    systemctl enable NetworkManager.service
    systemctl enable power-profiles-daemon.service

    # Add user to groups
    gpasswd -a $USERNAME audio
    gpasswd -a $USERNAME cups
    gpasswd -a $USERNAME flatpak
    gpasswd -a $USERNAME fwupd
    gpasswd -a $USERNAME gamemode
    gpasswd -a $USERNAME games
    gpasswd -a $USERNAME realtime
    gpasswd -a $USERNAME sddm
    gpasswd -a $USERNAME video
    gpasswd -a $USERNAME wheel

}

setup_gpu_drivers() {

    # Install the display drivers
    if [[ "${GPU}" == "amd" ]]; then
        # Install AMD GPU drivers
        pacman -Syyuu --noconfirm $AMDGPU_DRV
    elif [[ "${GPU}" == "intel" ]]; then
        # Install Intel GPU drivers
        pacman -Syyuu --noconfirm $INTELGPU_DRV
    elif [[ "${GPU}" == "nvidia" ]]; then
        # Install Nvidia GPU drivers
        pacman -Syyuu --noconfirm $NVIDIAGPU_DRV
        install -Dm644 mkinitcpio/80-nvidia.conf /etc/mkinitcpio.conf.d/80-nvidia.conf
    elif [[ "${GPU}" == "other" ]]; then
        # Install Intel GPU drivers
        pacman -Syyuu --noconfirm $OTHERGPU_DRV
    fi
    
    # Add opencl icd loader package
    pacman -Syyuu --noconfirm lib32-ocl-icd ocl-icd

}

# <<-- Main Menu -->>

# Make sure to run the script as root
if [[ "$USER" == "root" ]]; then

    ## Intialize the bootstrap environment
    while :
    do

        clear
        echo "Archlinux post installer setup"
        echo ""
        read -r -p "Do you want to run the post-install script (Type: yes or no): " MENU_OPTION
        echo ""
        read -r -p "Type in your username (i.e. myusername): " USERNAME
        clear

        if [[ "$MENU_OPTION" == "yes" ]]; then
            clear
            echo ""
            echo "Starting Archlinux post install..."
            clear
            arch_post_install
            sleep 2
            break
        elif [[ "$MENU_OPTION" == "no" ]]; then
            sleep 2
            exit
        else
            echo ""
            echo "Type in a valid option, restarting...."
            sleep 5
        fi

    done

    ## GPU driver installer
    while :
    do

        clear
        read -r -p "Type in the GPU name you have in your system (Options: amd, intel, nvidia, other, virtualbox): " GPU

        # Check if a supported GPU is available
        if [[ "${GPU}" == "amd" ]]; then
            clear
            setup_gpu_drivers
            echo ""
            echo "Installed GPU Drivers..."
            sleep 2
            break
        elif [[ "${GPU}" == "intel" ]]; then
            clear
            setup_gpu_drivers
            echo ""
            echo "Installed GPU Drivers..."
            sleep 2
            break
        elif [[ "${GPU}" == "nvidia" ]]; then
            clear
            setup_gpu_drivers
            echo ""
            echo "Installed GPU Drivers..."
            sleep 2
            break
        elif [[ "${GPU}" == "other" ]]; then
            clear
            setup_gpu_drivers
            echo ""
            echo "Installed GPU Drivers..."
            sleep 2
            break
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

else
    echo "Please be root to run this script..."
fi
