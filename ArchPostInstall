#!/bin/sh

# <<-- Globals -->>

## Graphics Driver

# AMD DRIVERS
AMDGPU_DRV="lib32-libva-mesa-driver lib32-ocl-icd lib32-vulkan-radeon libva-mesa-driver libva-utils ocl-icd rocm-opencl-runtime rocminfo vulkan-radeon"

# INTEL DRIVERS
INTELGPU_DRV="gst-plugin-qsv intel-compute-runtime intel-media-driver lib32-ocl-icd lib32-vulkan-intel libva-utils ocl-icd vpl-gpu-rt vulkan-intel"

# NVIDIA DRIVERS
NVIDIAGPU_DRV="lib32-nvidia-utils lib32-ocl-icd lib32-opencl-nvidia lib32-nvidia-cg-toolkit lib32-vulkan-nouveau libva-nvidia-driver libva-utils libvdpau-va-gl nvidia-cg-toolkit nvidia-open-dkms nvidia-settings nvidia-utils ocl-icd opencl-nvidia vdpauinfo vulkan-nouveau"

# OTHER DRIVERS
OTHERGPU_DRV="lib32-libva-mesa-driver lib32-vulkan-virtio libva-mesa-driver libva-utils vulkan-virtio"

## Start of package lists

# BASE SYSTEM for PLASMA
BASE_SYSTEM="7zip alsa-utils ark avahi bash-completion breeze5 btrfs-assistant btrfs-progs btrfsmaintenance cups cups-browsed cups-filters cups-pdf cups-pk-helper dbus-broker dolphin dolphin-plugins dosfstools efibootmgr elisa exfat-utils f2fs-tools fastfetch fatresize ffmpeg firewalld flatpak fwupd gamemode git gnu-free-fonts google-chrome gst-libav gst-plugin-libcamera gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-good gst-plugins-ugly gst-plugin-va hunspell gwenview hunspell-en_au hunspell-en_ca hunspell-en_gb hunspell-en_us icoutils ifuse kate keditbookmarks kid3 kio-admin kio-extras konsole lib32-gamemode lib32-gst-plugins-base lib32-gst-plugins-base-libs lib32-gst-plugins-good lib32-mangohud lib32-pipewire-jack lib32-pipewire-v4l2 libgpod libportal-gtk3 libportal-gtk4 libportal-qt5 libportal-qt6 libva-utils linux-firmware man-db man-pages mkinitcpio mkinitcpio-firmware mtools multilib-devel net-tools networkmanager noto-fonts noto-fonts-cjk noto-fonts-emoji ntfs-3g openrgb-git openrgb-plugin-effects-git openssh orca phonon-qt5-vlc phonon-qt6-vlc pipewire-alsa pipewire-audio pipewire-ffado pipewire-jack pipewire-libcamera pipewire-pulse pipewire-session-manager pipewire-v4l2 plasma plasma5-integration plasma-meta plasma-wayland-protocols plymouth pocl power-profiles-daemon pulse-native-provider pulsemixer qt5-multimedia qt6-multimedia qpwgraph realtime-privileges rtirq sane sane-airscan simple-scan snapper squashfs-tools steam steam-native-runtime sudo system-config-printer thunderbird ttf-ms-fonts udisks2 udisks2-btrfs unrar unzip usbguard vim vim-runtime wget wireless-regdb wireplumber xdg-desktop-portal-gtk xdg-user-dirs-gtk xf86-input-evdev xf86-input-libinput xfsprogs xorg-xauth xorg-xhost yt-dlp zip"

## End of package lists

arch_post_install() {

    ## Initialize Keyring
    pacman-key --init
    pacman-key --populate archlinux
    pacman-key --lsign-key archlinux

    # Chaotic Key Signature
    CHAOTIC_KEYSIG="3056513887B78AEB"

    # Recover Chaotic key signatures
    pacman-key --recv-key ${CHAOTIC_KEYSIG} --keyserver keyserver.ubuntu.com
    pacman-key --lsign-key ${CHAOTIC_KEYSIG}

    # Install Chaotic repo packages
    pacman -U --noconfirm 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst'
    pacman -U --noconfirm 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'

    # Install pacman.conf
    install -Dm644 pacman.conf $MOUNT_DIR/etc/pacman.conf

    ## Initialize Keyring Chaotic-AUR
    pacman-key --populate chaotic
    pacman-key --lsign-key chaotic

    # Install base system
    pacman -Syyuu --noconfirm $BASE_SYSTEM

    ## Make vim the default system-wide editor
    echo "EDITOR=/usr/bin/vim" >> $MOUNT_DIR/etc/environment

    # Enable system services
    systemctl enable avahi-daemon.service
    systemctl enable avahi-dnsconfd.service
    systemctl enable bluetooth.service
    systemctl enable cpupower.service
    systemctl enable cups.service
    systemctl enable cups-browsed.service
    systemctl enable dbus-broker.service
    systemctl enable firewalld.service
    systemctl enable NetworkManager.service
    systemctl enable power-profiles-daemon.service
    systemctl enable rtirq.service
    systemctl enable rtirq-resume.service
    systemctl enable sddm.service

    # Add user to groups
    gpasswd -a $USERNAME audio
    gpasswd -a $USERNAME cups
    gpasswd -a $USERNAME flatpak
    gpasswd -a $USERNAME gamemode
    gpasswd -a $USERNAME games
    gpasswd -a $USERNAME realtime
    gpasswd -a $USERNAME video
    gpasswd -a $USERNAME sddm

}

setup_gpu_drivers() {

    # Install the display drivers
    if [[ "${GPU}" == "amd" ]]; then
        # Install AMD GPU drivers
        pacman -Syyuu --noconfirm $AMDGPU_DRV
    elif [[ "${GPU}" == "intel" ]]; then
        # Install Intel GPU drivers
        pacman -Syyuu --noconfirm $INTELGPU_DRV
    elif [[ "${GPU}" == "nvidia" ]]; then
        # Install Nvidia GPU drivers
        pacman -Syyuu --noconfirm $NVIDIAGPU_DRV
        # Enable Nvidia related services
        systemctl enable nvidia-persistenced.service
        systemctl enable nvidia-powerd.service
    elif [[ "${GPU}" == "other" ]]; then
        # Install Intel GPU drivers
        pacman -Syyuu --noconfirm $OTHERGPU_DRV
    fi
    
    # Add opencl icd loader package
    pacman -Syyuu --noconfirm lib32-ocl-icd ocl-icd

}

# <<-- Main Menu -->>

# Make sure to run the script as root
if [[ "$USER" == "root" ]]; then

    ## Intialize the bootstrap environment
    while :
    do

        clear
        echo "Archlinux post installer setup"
        echo ""
        read -r -p "Do you want to run the post-install script (Type: yes or no): " MENU_OPTION
        echo ""
        read -r -p "Type in your username (i.e. myusername): " USERNAME
        clear

        if [[ "$MENU_OPTION" == "yes" ]]; then
            clear
            echo ""
            echo "Starting Archlinux post install..."
            clear
            arch_post_install
            sleep 2
            break
        elif [[ "$MENU_OPTION" == "no" ]]; then
            sleep 2
            exit
        else
            echo ""
            echo "Type in a valid option, restarting...."
            sleep 5
        fi

    done

    ## GPU driver installer
    while :
    do

        clear
        read -r -p "Type in the GPU name you have in your system (Options: amd, intel, nvidia, other, virtualbox): " GPU

        # Check if a supported GPU is available
        if [[ "${GPU}" == "amd" ]]; then
            clear
            setup_gpu_drivers
            echo ""
            echo "Installed GPU Drivers..."
            sleep 2
            break
        elif [[ "${GPU}" == "intel" ]]; then
            clear
            setup_gpu_drivers
            echo ""
            echo "Installed GPU Drivers..."
            sleep 2
            break
        elif [[ "${GPU}" == "nvidia" ]]; then
            clear
            setup_gpu_drivers
            echo ""
            echo "Installed GPU Drivers..."
            sleep 2
            break
        elif [[ "${GPU}" == "other" ]]; then
            clear
            setup_gpu_drivers
            echo ""
            echo "Installed GPU Drivers..."
            sleep 2
            break
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

else
    echo "Please be root to run this script..."
fi
