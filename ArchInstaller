#!/bin/sh

# AMD DRIVERS
AMDGPU_DRV="lib32-libva-mesa-driver lib32-ocl-icd lib32-vulkan-radeon libva-mesa-driver ocl-icd rocm-opencl-runtime rocminfo vulkan-radeon"

# INTEL DRIVERS
INTELGPU_DRV="gst-plugin-qsv intel-compute-runtime intel-media-driver lib32-ocl-icd lib32-vulkan-intel ocl-icd vpl-gpu-rt vulkan-intel"

# NVIDIA DRIVERS
NVIDIAGPU_DRV="lib32-nvidia-utils lib32-ocl-icd lib32-opencl-nvidia libva-nvidia-driver libvdpau-va-gl ocl-icd nvidia-open-dkms nvidia-settings nvidia-utils nvtop opencl-nvidia vdpauinfo"

# Archlinux with Plasma KDE base
BASE_SYSTEM="7zip alsa-utils apparmor argyllcms ark bash-completion bluez bluez-cups bluez-hid2hci bluez-obex breeze5 btrfs-progs cups cups-browsed cups-pdf cups-pk-helper dnsmasq dolphin dolphin-plugins dosfstools efibootmgr espeak-ng exfatprogs fastfetch ffmpeg ffmpeg4.4 ffmpegthumbs firefox flatpak flatpak-kcm fuse-overlayfs fwupd fwupd-efi gamemode gamescope git grub gst-libav gst-plugin-libcamera gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-good gst-plugins-ugly gst-plugin-va gwenview haruna hunspell icoutils ifuse kamera kate kcalc kdegraphics-mobipocket kdeplasma-addons kdialog keditbookmarks kf6 kgamma kid3 kio-admin kio-gdrive kio-zeroconf konsole kompare lib32-gamemode lib32-gst-plugins-base lib32-gst-plugins-base-libs lib32-gst-plugins-good lib32-mangohud lib32-mesa-demos lib32-mesa-utils lib32-pipewire-jack lib32-pipewire-v4l2 libappimage libdvdcss libgpod libimobiledevice libva-utils linux-firmware lshw man-db man-pages mangohud mesa-demos mesa-utils mkinitcpio-firmware mtools multilib-devel net-tools networkmanager networkmanager-openvpn noto-fonts noto-fonts-cjk noto-fonts-emoji nss-mdns ntfs-3g octopi openrgb-git openrgb-plugin-effects-git openresolv openssh openvpn os-prober orca partitionmanager phonon-qt6-vlc pipewire-alsa pipewire-audio pipewire-ffado pipewire-jack pipewire-libcamera pipewire-pulse pipewire-session-manager pipewire-v4l2 plasma-meta plymouth plymouth-kcm power-profiles-daemon pulse-native-provider pulsemixer qt6-multimedia qt6-multimedia-ffmpeg qpwgraph realtime-privileges sane sane-airscan skanlite soundfont-fluid spectacle steam steam-native-runtime sudo switcheroo-control system-config-printer tesseract-data-eus thunderbird udisks2-btrfs ufw usbguard usbmuxd unarchiver unrar vim vim-runtime vulkan-tools wacomtablet wget wireless-regdb wireplumber xdg-user-dirs-gtk yt-dlp zram-generator"

# Define where you want GRUB to be installed
ESP_MOUNT="boot/efi"

# Get RAM Size
RAMSIZE=`zramctl -o DISKSIZE -n`

# <<-- Main Menu -->>

# Make sure to run the script as root
if [[ "$USER" == "root" ]]; then

	# Install script dependencies
	clear
	pacman -Syy --noconfirm lshw

	# Check your cpu and gpu vendor
	CPU=`lshw -class cpu | grep "vendor" | cut -d ":" -f 2 | cut -d " " -f 2`
	GPU=`lshw -class video | grep "vendor" | cut -d ":" -f 2 | cut -d " " -f 2`

	# Menu Wizard
    clear
    echo "Archlinux installer setup wizard"
    echo ""
    lsblk -o TYPE,PATH | grep "disk"
    echo ""
    read -r -p "Type in the disk name you want to install the system on (i.e. /dev/sda): " INSTALL_DISK
    cfdisk ${INSTALL_DISK}
    clear
    echo "Archlinux installer setup wizard"
    echo ""
    lsblk -o TYPE,PATH ${INSTALL_DISK} | grep "part"
    echo ""
    read -r -p "Type in the partition name of the ESP boot partition (i.e. /dev/sda1): " BOOT_PARTITION
    read -r -p "Type in the partition name of the system install (i.e. /dev/sda2): " SYSTEM_PARTITION
    read -r -p "Type in the install mountpoint (i.e. /mnt): " MOUNT_DIR
    read -r -p "Type in your username (i.e. myusername): " USERNAME
    read -s -p "Type in ${USERNAME}'s password (i.e. mypassword): " PASSWORD
    echo ""
    read -r -p "Type in your computer's host name (i.e. mycomputer): " HOSTNAME
    read -r -p "Type in the kernel you want to install (i.e. linux or linux-zen): " KERNEL
    clear
    cat /etc/locale.gen | more
    clear
    echo "Archlinux installer setup wizard"
    echo ""
    read -r -p "Type in your system locale name (i.e. en_US): " LOCALE
    read -r -p "Type in a country code (i.e. ca, us, uk): " COUNTRY_CODE
    clear
    timedatectl list-timezones
    clear
    echo "Archlinux installer setup wizard"
    echo ""
    read -r -p "Type in your system's timezone (i.e. America/Toronto): " TIMEZONE
    clear

	# Confirmation screen
	echo "Archlinux installer setup wizard"
    echo ""
    echo "ARE THESE YOUR SETTINGS:"
    echo ""
    echo "System Settings"
    echo ""
    echo "Boot partition: $BOOT_PARTITION"
    echo "Root partition: $SYSTEM_PARTITION"
    echo "Install mountpoint: $MOUNT_DIR"
    echo "ESP system boot mountpoint: /${ESP_MOUNT}"
    echo "CPU: $CPU"
    echo "GPU: $GPU"
    echo "Kernel to install: $KERNEL"
    echo ""
    echo "User Settings"
    echo ""
    echo "Username: $USERNAME"
    echo "Hostname: $HOSTNAME"
    echo "System locale: LANG=${LOCALE}.UTF-8"
    echo "System country code: $COUNTRY_CODE"
    echo "System timezone: $TIMEZONE"
    echo ""
    read -r -p "Is this information correct yes or no? " CONFIRM
    clear

# <<-- Functions -->>

format_system_partitions() {

	# Format ESP boot partition
	mkfs.vfat -F32 -n ESP $BOOT_PARTITION

	# Format system install partition
	mkfs.btrfs -L Archlinux -f $SYSTEM_PARTITION

}

main_installation() {

	# Global Variables
    CHAOTIC_KEY="3056513887B78AEB"

    # Initialize system
    pacstrap -K ${MOUNT_DIR} base base-devel mkinitcpio reflector sudo

    ## Initialize Keyrings
    arch-chroot ${MOUNT_DIR} pacman-key --init
    arch-chroot ${MOUNT_DIR} pacman-key --populate archlinux
    arch-chroot ${MOUNT_DIR} pacman-key --lsign-key archlinux
    arch-chroot ${MOUNT_DIR} pacman-key --recv-key $CHAOTIC_KEY --keyserver keyserver.ubuntu.com
    arch-chroot ${MOUNT_DIR} pacman-key --lsign-key $CHAOTIC_KEY

    ## Chaotic AUR meta packages
    arch-chroot ${MOUNT_DIR} pacman -U --noconfirm 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst'
    arch-chroot ${MOUNT_DIR} pacman -U --noconfirm 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'

    # Generate fstab
	genfstab -U $MOUNT_DIR > $MOUNT_DIR/etc/fstab

	# Install custom scripts
	install -Dm755 custom/efibootstub-utility $MOUNT_DIR/usr/local/bin/efibootstub-utility

    # Install BTRFS early mkinitcpio module
    install -Dm644 etc/mkinitcpio/60-btrfs.conf $MOUNT_DIR/etc/mkinitcpio.conf.d/60-btrfs.conf

    # Enable ntsync for wine
    install -Dm644 etc/modules/10-ntsync.conf $MOUNT_DIR/etc/modules-load.d/10-ntsync.conf

    # Enable network roaming discovery with avahi
    install -Dm644 etc/nsswitch.conf $MOUNT_DIR/etc/nsswitch.conf

    # Configure NetworkManager's default DNS service
    install -Dm644 etc/NetworkManager/10-dns.conf $MOUNT_DIR/etc/NetworkManager/conf.d/10-dns.conf

    # Install pacman.conf
    install -Dm644 etc/pacman/pacman.conf $MOUNT_DIR/etc/pacman.conf

    # Install SDDM configs
    install -Dm644 etc/sddm/kde_settings.conf $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf
    install -Dm644 etc/sddm/virtualkbd.conf $MOUNT_DIR/etc/sddm.conf.d/virtualkbd.conf

    # ZRAM Generator Config
    install -Dm644 etc/systemd/zram-generator.conf $MOUNT_DIR/etc/systemd/zram-generator.conf

    # ZRAM etc fstab entry
    echo "# ZRAM Swap" >> $MOUNT_DIR/etc/fstab
    echo "/dev/zram0 none swap defaults,discard,pri=100,x-systemd.makefs 0 0" >> $MOUNT_DIR/etc/fstab
	echo "" >> $MOUNT_DIR/etc/fstab

    # Install flathub as a user
    install -Dm755 etc/skel/Desktop/enable_flathub_as_user $MOUNT_DIR/etc/skel/Desktop/enable_flathub_as_user

    # Install snapper installer script
    install -Dm755 etc/skel/Desktop/enable_snapshots $MOUNT_DIR/etc/skel/Desktop/enable_snapshots
    
    # Install nvidia driver toggle script
    install -Dm755 etc/skel/Desktop/nvidia_driver_toggle $MOUNT_DIR/etc/skel/Desktop/nvidia_driver_toggle

	# Install CPU microcode
	if [[ "${CPU}" == "Advanced" ]]; then

		# Install AMD microcode
		arch-chroot ${MOUNT_DIR} pacman -Syy --noconfirm amd-ucode

	elif [[ "${CPU}" == "Intel" ]]; then

		# Install Intel microcode
		arch-chroot ${MOUNT_DIR} pacman -Syy --noconfirm intel-ucode

	fi

	# Install the display drivers
    if [[ "${GPU}" == "Advanced" ]]; then

		# Install AMD GPU drivers
		arch-chroot ${MOUNT_DIR} pacman -Syy --noconfirm $AMDGPU_DRV

    elif [[ "${GPU}" == "Intel" ]]; then

		# Install Intel GPU drivers
		arch-chroot ${MOUNT_DIR} pacman -Syy --noconfirm $INTELGPU_DRV

    elif [[ "${GPU}" == "NVIDIA" ]]; then

		# Install Nvidia GPU drivers
		arch-chroot ${MOUNT_DIR} pacman -Syy --noconfirm $NVIDIAGPU_DRV

		# Enable nvidia GPU driver related services
		arch-chroot ${MOUNT_DIR} systemctl enable nvidia-hibernate.service
		arch-chroot ${MOUNT_DIR} systemctl enable nvidia-persistenced.service
		arch-chroot ${MOUNT_DIR} systemctl enable nvidia-powerd.service
		arch-chroot ${MOUNT_DIR} systemctl enable nvidia-resume.service
		arch-chroot ${MOUNT_DIR} systemctl enable nvidia-suspend.service
		arch-chroot ${MOUNT_DIR} systemctl enable nvidia-suspend-then-hibernate.service

    fi

	# Create mirrorlist file with your country's mirrors
    arch-chroot ${MOUNT_DIR} reflector -c ${COUNTRY_CODE} --age 12 -p http,https --sort rate --save /etc/pacman.d/mirrorlist

    # Install desired kernel and headers
	arch-chroot ${MOUNT_DIR} pacman -Syy --noconfirm ${KERNEL} ${KERNEL}-headers scx-scheds

	# Install system packages
	arch-chroot ${MOUNT_DIR} pacman -Syy --noconfirm $BASE_SYSTEM

	# Run final system package update
	arch-chroot ${MOUNT_DIR} pacman -Suu --noconfirm

    # Enable system services
    arch-chroot ${MOUNT_DIR} systemctl enable avahi-daemon.service
    arch-chroot ${MOUNT_DIR} systemctl enable avahi-dnsconfd.service
    arch-chroot ${MOUNT_DIR} systemctl enable bluetooth.service
    arch-chroot ${MOUNT_DIR} systemctl enable cups.service
    arch-chroot ${MOUNT_DIR} systemctl enable cups-browsed.service
    arch-chroot ${MOUNT_DIR} systemctl enable dbus-broker.service
    arch-chroot ${MOUNT_DIR} systemctl enable power-profiles-daemon.service
    arch-chroot ${MOUNT_DIR} systemctl enable scx.service
    arch-chroot ${MOUNT_DIR} systemctl enable scx_loader.service
    arch-chroot ${MOUNT_DIR} systemctl enable sddm.service
    arch-chroot ${MOUNT_DIR} systemctl enable ufw.service
    arch-chroot ${MOUNT_DIR} systemctl enable NetworkManager.service

	# Make vim the default system-wide editor
    echo "EDITOR=/usr/bin/vim" > $MOUNT_DIR/etc/environment

	# Add tmpfs to the fstab
	echo "# tmpfs" >> $MOUNT_DIR/etc/fstab
	echo "tmpfs /tmp tmpfs defaults,noatime,mode=1777 0 0" >> $MOUNT_DIR/etc/fstab

	# Make the fluid soundfont the default for midi playback
	echo "SOUND_FONT=/usr/share/soundfonts/FluidR3_GM.sf2" > $MOUNT_DIR/etc/conf.d/fluidsynth

	# Enable wheel group for administrator tasks
    sed -i -e "s/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/" $MOUNT_DIR/etc/sudoers

	# Create user with password
	arch-chroot ${MOUNT_DIR} useradd -m $USERNAME
	arch-chroot ${MOUNT_DIR} usermod --password $(echo $PASSWORD | openssl passwd -1 -stdin) $USERNAME

    # Add user to groups
    arch-chroot ${MOUNT_DIR} gpasswd -a $USERNAME audio
    arch-chroot ${MOUNT_DIR} gpasswd -a $USERNAME cups
    arch-chroot ${MOUNT_DIR} gpasswd -a $USERNAME flatpak
    arch-chroot ${MOUNT_DIR} gpasswd -a $USERNAME fwupd
    arch-chroot ${MOUNT_DIR} gpasswd -a $USERNAME gamemode
    arch-chroot ${MOUNT_DIR} gpasswd -a $USERNAME games
    arch-chroot ${MOUNT_DIR} gpasswd -a $USERNAME realtime
    arch-chroot ${MOUNT_DIR} gpasswd -a $USERNAME sddm
    arch-chroot ${MOUNT_DIR} gpasswd -a $USERNAME video
    arch-chroot ${MOUNT_DIR} gpasswd -a $USERNAME wheel

    # Add a hostname for the machine
    echo "$HOSTNAME" > ${MOUNT_DIR}/etc/hostname

    # Set your timezone
    arch-chroot ${MOUNT_DIR} timedatectl set-timezone $TIMEZONE
    arch-chroot ${MOUNT_DIR} ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime

	# Create locale configuration
	echo "LANG=\"${LOCALE}\".UTF-8" > ${MOUNT_DIR}/etc/locale.conf
	echo "LC_CTYPE=\"${LOCALE}\".UTF-8" >> ${MOUNT_DIR}/etc/locale.conf
	echo "LC_NUMERIC=\"${LOCALE}\".UTF-8" >> ${MOUNT_DIR}/etc/locale.conf
	echo "LC_TIME=\"${LOCALE}\".UTF-8" >> ${MOUNT_DIR}/etc/locale.conf
	echo "LC_COLLATE=\"${LOCALE}\".UTF-8" >> ${MOUNT_DIR}/etc/locale.conf
	echo "LC_MONETARY=\"${LOCALE}\".UTF-8" >> ${MOUNT_DIR}/etc/locale.conf
	echo "LC_MESSAGES=\"${LOCALE}\".UTF-8" >> ${MOUNT_DIR}/etc/locale.conf
	echo "LC_PAPER=\"${LOCALE}\".UTF-8" >> ${MOUNT_DIR}/etc/locale.conf
	echo "LC_NAME=\"${LOCALE}\".UTF-8" >> ${MOUNT_DIR}/etc/locale.conf
	echo "LC_ADDRESS=\"${LOCALE}\".UTF-8" >> ${MOUNT_DIR}/etc/locale.conf
	echo "LC_TELEPHONE=\"${LOCALE}\".UTF-8" >> ${MOUNT_DIR}/etc/locale.conf
	echo "LC_MEASUREMENT=\"${LOCALE}\".UTF-8" >> ${MOUNT_DIR}/etc/locale.conf
	echo "LC_IDENTIFICATION=\"${LOCALE}\".UTF-8" >> ${MOUNT_DIR}/etc/locale.conf
	echo "LC_ALL=\"C\"" >> ${MOUNT_DIR}/etc/locale.conf

	# Set your system locale
	sed -i -e "s/#${LOCALE}.UTF-8/${LOCALE}.UTF-8/" ${MOUNT_DIR}/etc/locale.gen
	sed -i -e "s/#${LOCALE} UTF-8/${LOCALE} UTF-8/" ${MOUNT_DIR}/etc/locale.gen
	arch-chroot ${MOUNT_DIR} locale-gen

}

setup_bootloader() {

	# System partition UUID
	ROOT_UUID=`lsblk -o UUID ${SYSTEM_PARTITION} | tail -1`

	# Commandline Options
	EFI_OPTIONS="lsm=landlock,lockdown,yama,integrity,apparmor,bpf zswap.enabled=1 zswap.shrinker_enabled=1 zswap.compressor=zstd zswap.max_pool_percent=25 rootfstype=btrfs resume=UUID=${ROOT_UUID} root=UUID=${ROOT_UUID} cpufreq.default_governor=performance mitigations=off threadirqs rw rootflags=subvol=@ loglevel=3 nowatchdog quiet splash"

	# Install GRUB Bootloader
	arch-chroot ${MOUNT_DIR} grub-install --target=x86_64-efi --efi-directory=/${ESP_MOUNT} --bootloader-id="Archlinux"

	# Configure GRUB Bootloader
	sed -i -e "s/loglevel=3 quiet/${EFI_OPTIONS}/" ${MOUNT_DIR}/etc/default/grub

	# Update GRUB Bootloader
	arch-chroot ${MOUNT_DIR} grub-mkconfig -o /boot/grub/grub.cfg

}

system_mapping() {

	# Mount system partition
	mount $SYSTEM_PARTITION $MOUNT_DIR

	# Setup subvolumes
	btrfs subvolume create ${MOUNT_DIR}/@
	btrfs subvolume create ${MOUNT_DIR}/@.snapshots
	btrfs subvolume create ${MOUNT_DIR}/@cache
	btrfs subvolume create ${MOUNT_DIR}/@home
	btrfs subvolume create ${MOUNT_DIR}/@log
	btrfs subvolume create ${MOUNT_DIR}/@srv

	# Unmount system partition
	umount -lf $MOUNT_DIR

	# Mount root BTRFS subvolume
	mount -t btrfs -o rw,noatime,compress=zstd:6,subvol=/@ $SYSTEM_PARTITION $MOUNT_DIR

	# Make mount directories
	mkdir -p ${MOUNT_DIR}/.snapshots
	mkdir -p ${MOUNT_DIR}/home
	mkdir -p ${MOUNT_DIR}/srv
	mkdir -p ${MOUNT_DIR}/var/cache
	mkdir -p ${MOUNT_DIR}/var/log

	# Mount other BTRFS subvolumes
	mount -t btrfs -o rw,noatime,compress=zstd:6,subvol=/@.snapshots $SYSTEM_PARTITION $MOUNT_DIR/.snapshots
	mount -t btrfs -o rw,noatime,compress=zstd:6,subvol=/@cache $SYSTEM_PARTITION $MOUNT_DIR/var/cache
	mount -t btrfs -o rw,noatime,compress=zstd:6,subvol=/@home $SYSTEM_PARTITION $MOUNT_DIR/home
	mount -t btrfs -o rw,noatime,compress=zstd:6,subvol=/@log $SYSTEM_PARTITION $MOUNT_DIR/var/log
	mount -t btrfs -o rw,noatime,compress=zstd:6,subvol=/@srv $SYSTEM_PARTITION $MOUNT_DIR/srv

	# Mount ESP system boot partition
	mkdir -p ${MOUNT_DIR}/${ESP_MOUNT}
	mount $BOOT_PARTITION ${MOUNT_DIR}/${ESP_MOUNT}

}

unmount_chroot() {

	# Unmount chroot
	umount -lf $MOUNT_DIR

}

# <<-- Program Logic -->>

if [[ "$CONFIRM" == "yes" ]]; then

		# Installation progress dialog
		echo 'Install in progress!!'
		echo ""
		sleep 5
		clear

		# Format partitions
		echo "Formatting partitions..."
		echo ""
		format_system_partitions
		sleep 5
		clear

		# Create install mapping
		echo "Creating system map..."
		echo ""
		system_mapping
		sleep 5
		clear

		# Main system installation
		echo "Installing system..."
		echo ""
		main_installation
		sleep 5
		clear

		# Setup the bootloader
		echo "Setting up bootloader..."
		echo ""
		setup_bootloader
		sleep 5
		clear

		# Unmount current system
		echo "Unmount system install..."
		echo ""
		unmount_chroot
		sleep 5
		clear

		# Installation complete message
		echo 'Install Complete!!!'
		sleep 5
		clear
		systemctl reboot

	else

		# exit script
		exit

	fi

else

	# Check if the user is root
    echo "Please be root to run this script..."

fi
